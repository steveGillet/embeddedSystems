/*
 * mainHead.h
 *
 *  Created on: Sep 18, 2022
 *      Author: root
 */

#ifndef MAINHEAD_H_
#define MAINHEAD_H_

#include <stddef.h>
#include <string.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

//#include <pthread.h>
/* BSD support */
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <netdb.h>

#include <ti/net/slnetutils.h>
#include <ti/drivers/UART.h>
#include <ti/drivers/GPIO.h>
#include <ti/drivers/Board.h>
#include <ti/drivers/Timer.h>

#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Semaphore.h>

#define UDPPACKETSIZE 1472
#define MAXPORTLEN    6

extern void fdOpenSession();
extern void fdCloseSession();
extern void *TaskSelf();

#include "ti_drivers_config.h"


/* Callback used for toggling the LED. */
void timerCallback(Timer_Handle myHandle, int_fast16_t status);

typedef struct variables{
    char aboutOutput[128];
    int timerCallbackCount;
    int messageIndex;
    char newLine[2];
    int queLen;
    char        input;
    const char echoPrompt[] = "Welcome to MSP432:\r\n";

    const char helpHelpOutput[] = "\r\n-help prints a complete list of supported commands\r\n";
    const char helpAboutOutput[] = "\r\n-about prints the name, assignment number, version and date/time of compile\r\n";
    const char helpPrintOutput[] = "\r\n-print prints any text following the command\r\n";
    const char helpMemrOutput[] = "\r\n-memr shows what is in the memory space specified after the command\r\n\tFlash: 0x00000000 to 0x000FFFFF\r\n\tSRAM: 0x20000000 to 0x2003FFFF\r\n\tPeripherals: 0x40000000 to 0x44055000\r\n";
    const char helpGPIOOutput[] = "\r\n-gpio allows to you read (-r), toggle (-t), and write (-w) to the GPIO pins.\r\n\tThe first argument is the pin number, second argument is the command type (-t, -w, -r), and the third is 1 or 0 if you are writing high or low\r\n0-3 are LEDs 1-4, 4-5 are the left and right switches, 6 is PK5 and 6 is PD4(*RX)\r\n";
    const char helpErrorOutput[] = "\r\n-error shows the current count of errors.\r\n";

    const char help[];
    const char about[128];
    char command[128];
    char previousCommand[128];
    char callbackCommand[128];
    int i;
    char arrowInput[2];
    // overflow, incorrect command, invalid mem address
    int errorCount[3];
    int overflowFlag;
} Variables;

typedef struct _callbacks{
    char payload[128];
    int callbackNumber[3];
} Callback;

typedef struct _message{
    char message[128]; //allocate memory
    int queIndex;
    int msgIndex;
} Message;

typedef struct _messageQueue{
    Message messages[8];
    int readIndex;
    int writeIndex;
} MessageQueue;
typedef struct _globals {
    Timer_Handle timer0;
    UART_Handle uart;
    Variables var;
    MessageQueue msgQue;
    Callback callback;
    Semaphore_Handle callbackSem;
} Globals;

#ifndef MAIN
extern
#endif
Globals Glo;


void commandEntry(const char *command);
void initializeDrivers(void);
void stringCopy(char *outString, const char *copiedString);
char *secondString(const char *fullString);
int commandTest(const char *command, const char *compareString);
void addMessage(const char *inMessage);
void commandServicer(void);
void infra(void);

#endif /* MAINHEAD_H_ */
