/*
 * Glo.uartEcho.c
 *
 *  Created on: Sep 17, 2022
 *      Author: root
 */

#include "mainHead.h"

void *uartEcho(void *arg0)
{

    UART_write(Glo.uart, echoPrompt, sizeof(echoPrompt));

    /* Loop forever echoing */
    while (1) {
        arrowInput[0] = 0;
        UART_read(Glo.uart, &input, 1);
        if(input == '\33') {
            UART_read(Glo.uart, &arrowInput, 2);
            if(commandTest("[A", arrowInput)){
                UART_write(Glo.uart, "\r", strlen("\r"));
                UART_write(Glo.uart, "                                    ", strlen("                                    "));
                UART_write(Glo.uart, "\r", strlen("\r"));
                UART_write(Glo.uart, &previousCommand, strlen(previousCommand));
                strcpy(command, previousCommand);
                i = strlen(command);
                continue;
            }
            else{
                UART_write(Glo.uart, &input, 1);
                UART_write(Glo.uart, &arrowInput, 2);
            }
        }
        if(i < 127){
            UART_write(Glo.uart, &input, 1);
        }

        if(input == '\r') {
            commandEntry(command);

            strcpy(previousCommand, command);
            memset(command,0,sizeof(command));
            i=0;
            UART_write(Glo.uart, &newLine, sizeof(newLine));
            overflowFlag = 0;
        }
        else if (input == '\b' && i > 0){
            i--;
            command[i] = 0;
            UART_write(Glo.uart, " \b", strlen(" \b"));
        }
        else if (i < 127) {
            command[i] = input;
            i++;
        }
        if (i == 127 && overflowFlag == 0) {
            overflowFlag = 1;
            errorCount[0]++;
        }
    }
}

/*
 *  ======== mainThread ========
 */

/*
 * This callback is called every 1,000,000 microseconds, or 1 second. Because
 * the LED is toggled each time this function is called, the LED will blink at
 * a rate of once every 2 seconds.
 */
void timerCallback(Timer_Handle myHandle, int_fast16_t status)
{
    if(timerCallbackCount>0){
        commandEntry(callbackCommand);
    }
    timerCallbackCount--;
}

void commandEntry(const char *command) {
    if(commandTest(help, command)){
        char helpCommand[128] = "";
        secondString(helpCommand, command);

        if(strstr(helpCommand, "help")) UART_write(Glo.uart, &helpHelpOutput, sizeof(helpHelpOutput));
        else if(strstr(helpCommand, "about")) UART_write(Glo.uart, &helpAboutOutput, sizeof(helpAboutOutput));
        else if(strstr(helpCommand, "print")) UART_write(Glo.uart, &helpPrintOutput, sizeof(helpPrintOutput));
        else if(strstr(helpCommand, "memr")) UART_write(Glo.uart, &helpMemrOutput, sizeof(helpMemrOutput));
        else if(strstr(helpCommand, "gpio")) UART_write(Glo.uart, &helpGPIOOutput, sizeof(helpGPIOOutput));
        else if(strstr(helpCommand, "error")) UART_write(Glo.uart, &helpErrorOutput, sizeof(helpErrorOutput));
        else{
            UART_write(Glo.uart, &helpHelpOutput, sizeof(helpHelpOutput));
            UART_write(Glo.uart, &helpAboutOutput, sizeof(helpAboutOutput));
            UART_write(Glo.uart, &helpPrintOutput, sizeof(helpPrintOutput));
            UART_write(Glo.uart, &helpMemrOutput, sizeof(helpMemrOutput));
            UART_write(Glo.uart, &helpGPIOOutput, sizeof(helpGPIOOutput));
            UART_write(Glo.uart, &helpErrorOutput, sizeof(helpErrorOutput));
       }
    }
    else if(commandTest(about, command)) UART_write(Glo.uart, &aboutOutput, sizeof(aboutOutput));
    else if(commandTest("-print", command)) {
        char print[128] = "";
        secondString(print, command);
        addMessage(print);
        UART_write(Glo.uart, &newLine, sizeof(newLine));
        UART_write(Glo.uart, &MsgQue.messages[messageIndex-1].message, strlen(MsgQue.messages[messageIndex-1].message));
    }
    else if(commandTest("-memr", command)) {
        char memoryBuffer[128] = "";
        long memoryAddress = 0;
        long memoryContents = 0;
        char memoryString[128] = "";
        char memoryAddressString[128] = "";
        char *ptr;

        secondString(memoryBuffer, command);
        memoryAddress = strtol(memoryBuffer, &ptr, 16);
        if(memoryAddress < 0x00000000 || (memoryAddress > 0x000FFFFF && memoryAddress < 0x20000000) || (memoryAddress > 0x2003FFFF && memoryAddress < 0x40000000) || memoryAddress > 0x44055000){
            UART_write(Glo.uart, &newLine, strlen(newLine));
            UART_write(Glo.uart, "Error: Invalid Address", strlen("Error: Invalid Address"));
            errorCount[2]++;
        }

        else{
            memoryAddress = memoryAddress & 0xFFFFFFF0;

            UART_write(Glo.uart, &newLine, sizeof(newLine));
            for(i = 0xC; i >= 0; i -= 0x4){
                sprintf(memoryAddressString, "0x%08lx\t\t", memoryAddress + i);
                UART_write(Glo.uart, &memoryAddressString, strlen(memoryAddressString));
            }
            UART_write(Glo.uart, &newLine, sizeof(newLine));
            for(i = 0xC; i >= 0; i -= 0x4){
                memoryContents = *(int32_t *) (memoryAddress + i);
                sprintf(memoryString, "0x%08lx\t\t", memoryContents);
                UART_write(Glo.uart, &memoryString, strlen(memoryString));
            }
        }
    }
    else if(commandTest("-gpio", command)) {
        char gpioBuffer[128] = "";
        char writeBuffer[1] = "";
        char pinBuffer[128] = "";
        int pinNumber = 0;
        secondString(pinBuffer, command);
        pinNumber = atoi(pinBuffer);
        secondString(gpioBuffer, pinBuffer);
        if(commandTest("-w", gpioBuffer)){
            secondString(writeBuffer, gpioBuffer);
            if(commandTest("0", writeBuffer)) GPIO_write(pinNumber, 0);
            else if(commandTest("1", writeBuffer)) GPIO_write(pinNumber, 1);
            else GPIO_write(0, 1);
        }
        else if(commandTest("-r", gpioBuffer)){
            UART_write(Glo.uart, &newLine, strlen(newLine));
            if(GPIO_read(pinNumber)) UART_write(Glo.uart, "1", 1);
            else UART_write(Glo.uart, "0", 1);
        }
        else if(commandTest("-t", gpioBuffer)){
            GPIO_toggle(pinNumber);

        }
        else{
            for (i = 0; i < 8; i++){
                UART_write(Glo.uart, &newLine, strlen(newLine));
                if(GPIO_read(i)) UART_write(Glo.uart, "1", 1);
                else UART_write(Glo.uart, "0", 1);
            }
        }
    }
    else if(commandTest("-error", command)) {
        char errorBufferOverflow[128] = "";
        sprintf(errorBufferOverflow,         "Overflow:          %2d", errorCount[0]);
        char errorBufferIncorrectCommand[128] = "";
        sprintf(errorBufferIncorrectCommand, "Incorrect Command: %2d", errorCount[1]);
        char errorBufferInvalidMemory[128] = "";
        sprintf(errorBufferInvalidMemory,    "Invalid Memory:    %2d", errorCount[2]);
        UART_write(Glo.uart, &newLine, strlen(newLine));
        UART_write(Glo.uart, errorBufferOverflow, strlen(errorBufferOverflow));
        UART_write(Glo.uart, &newLine, strlen(newLine));
        UART_write(Glo.uart, errorBufferIncorrectCommand, strlen(errorBufferIncorrectCommand));
        UART_write(Glo.uart, &newLine, strlen(newLine));
        UART_write(Glo.uart, errorBufferInvalidMemory, strlen(errorBufferInvalidMemory));
    }
    else if(commandTest("-timer", command)) {
        char periodBuffer[128] = "";
        int period;
        secondString(periodBuffer, command);
        period = 10;
    }
    else if(commandTest("-callback", command)) {
        char callbackBuffer[128] = "";
        secondString(callbackBuffer, command);
        char numberBuffer[128] = "";
        secondString(numberBuffer, callbackBuffer);
        char payloadBuffer[128] = "";
        secondString(payloadBuffer, numberBuffer);

        timerCallbackCount = atoi(numberBuffer);
        strcpy(callbackCommand, payloadBuffer);
    }
    else errorCount[1]++;
}


