/*
 * Copyright (c) 2015-2020, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== uartecho.c ========
 */
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <time.h>

/* Driver Header files */
#include <ti/drivers/GPIO.h>
#include <ti/drivers/UART.h>

/* Driver configuration */
#include "ti_drivers_config.h"

/*
 *  ======== mainThread ========
 */
void *uartEcho(void *arg0)
{
    char        input;
    const char  echoPrompt[] = "Welcome to MSP432:\r\n";
    UART_Handle uart;
    UART_Params uartParams;

    /* Call driver init functions */
    UART_init();

    /* Create a UART with data processing off. */
    UART_Params_init(&uartParams);
    uartParams.writeDataMode = UART_DATA_BINARY;
    uartParams.readDataMode = UART_DATA_BINARY;
    uartParams.readReturnMode = UART_RETURN_FULL;
    uartParams.baudRate = 115200;

    uart = UART_open(CONFIG_UART_0, &uartParams);

    if (uart == NULL) {
        /* UART_open() failed */
        while (1);
    }

    UART_write(uart, echoPrompt, sizeof(echoPrompt));

    const char helpHelpOutput[] = "\r\n-help prints a complete list of supported commands\r\n";
    const char helpAboutOutput[] = "\r\n-about prints the name, assignment number, version and date/time of compile\r\n";
    const char helpPrintOutput[] = "\r\n-print prints any text following the command\r\n";
    const char helpMemrOutput[] = "\r\n-memr shows what is in the memory space specified after the command\r\n";
    char aboutOutput[80] = "";
    sprintf(aboutOutput, "\r\nSteve Gillet, Assignment 2, v1.0, %s, %s\r\n", __TIME__, __DATE__);
    const char help[128] = "-help";
    const char about[128] = "-about";
    const char newLine[] = "\r\n";
    char command[128] = "";
    int i = 0;

    /* Loop forever echoing */
    while (1) {
        UART_read(uart, &input, 1);
        if(i < 127){
            UART_write(uart, &input, 1);
        }
        if(input == '\r') {
            if(commandTest(help, command)){
                char helpCommand[128] = "";
                secondString(helpCommand, command);
                if(strstr(helpCommand, "help")) UART_write(uart, &helpHelpOutput, sizeof(helpHelpOutput));
                else if(strstr(helpCommand, "about")) UART_write(uart, &helpAboutOutput, sizeof(helpAboutOutput));
                else if(strstr(helpCommand, "print")) UART_write(uart, &helpPrintOutput, sizeof(helpPrintOutput));
                else if(strstr(helpCommand, "memr")) UART_write(uart, &helpMemrOutput, sizeof(helpMemrOutput));
                else{
                    UART_write(uart, &helpHelpOutput, sizeof(helpHelpOutput));
                    UART_write(uart, &helpAboutOutput, sizeof(helpAboutOutput));
                    UART_write(uart, &helpPrintOutput, sizeof(helpPrintOutput));
                    UART_write(uart, &helpMemrOutput, sizeof(helpMemrOutput));
                }
            }
            else if(commandTest(about, command)) UART_write(uart, &aboutOutput, sizeof(aboutOutput));
            else if(commandTest("-print", command)) {
                char print[128] = "";
                secondString(print, command);
                UART_write(uart, &newLine, sizeof(newLine));
                UART_write(uart, &print, strlen(print));
            }
            else if(commandTest("-memr", command)) {
                char memoryBuffer[128] = "";
                long memoryAddress = 0;
                long memoryContents = 0;
                char memoryString[128] = '\0';
                char memoryAddressString[128] = '\0';
                char *ptr;

                secondString(memoryBuffer, command);
                memoryAddress = strtol(memoryBuffer, &ptr, 16);
                memoryAddress = memoryAddress & 0xFFFFFFFC;


                UART_write(uart, &newLine, sizeof(newLine));
                for(i = 0xC; i >= 0; i -= 0x4){
                    sprintf(memoryAddressString, "0x%-10lx\t\t", memoryAddress + i);
                    UART_write(uart, &memoryAddressString, strlen(memoryAddressString));
                }
                UART_write(uart, &newLine, sizeof(newLine));
                for(i = 0xC; i >= 0; i -= 0x4){
                    memoryContents = *(int32_t *) (memoryAddress + i);
                    sprintf(memoryString, "0x%-10lx\t\t", memoryContents);
                    UART_write(uart, &memoryString, strlen(memoryString));
                }
            }
            memset(command,0,sizeof(command));
            i=0;
            UART_write(uart, &newLine, sizeof(newLine));
        }
        else if (input == '\b' && i > 0){
            i--;
            command[i] = 0;
            UART_write(uart, " \b", strlen(" \b"));
        }
        else if (i < 127) {
            command[i] = input;
            i++;
        }
    }
}

int commandTest(char command[], char enteredInput[]){
    int i = 0;
    for( i = 0; i < strlen(command); i++) {
        if(enteredInput[i] != command[i]) break;
        if(i == (strlen(command) - 1)){
            return 1;
        }
    }
    return 0;
}

void secondString(char print[], char command[]){
    int startSpace = 0;
    int i = 0;
    for(i = 0; i < strlen(command); i++){
        if(command[i] == ' ') startSpace = 1;
        else if(command[i] != ' ' && startSpace == 1) break;
    }
    int j = 0;
    for(j = 0; j < (strlen(command) - i); j++){
        print[j] = command[j+i];
    }
}
