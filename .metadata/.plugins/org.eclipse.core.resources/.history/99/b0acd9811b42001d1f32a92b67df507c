/*
 * infrastructure.c
 *
 *  Created on: Sep 26, 2022
 *      Author: root
 */

#include <mainHead.h>

char aboutOutput[128] = "";
int timerCallbackCount = 0;
int messageIndex = 0;
char newLine[2] = "\r\n";
int queLen = 8;
extern Semaphore_Handle semaphore0;

char        input;
const char echoPrompt[] = "Welcome to MSP432:\r\n";

const char helpHelpOutput[] = "\r\n-help prints a complete list of supported commands\r\n";
const char helpAboutOutput[] = "\r\n-about prints the name, assignment number, version and date/time of compile\r\n";
const char helpPrintOutput[] = "\r\n-print prints any text following the command\r\n";
const char helpMemrOutput[] = "\r\n-memr shows what is in the memory space specified after the command\r\n\tFlash: 0x00000000 to 0x000FFFFF\r\n\tSRAM: 0x20000000 to 0x2003FFFF\r\n\tPeripherals: 0x40000000 to 0x44055000\r\n";
const char helpGPIOOutput[] = "\r\n-gpio allows to you read (-r), toggle (-t), and write (-w) to the GPIO pins.\r\n\tThe first argument is the pin number, second argument is the command type (-t, -w, -r), and the third is 1 or 0 if you are writing high or low\r\n0-3 are LEDs 1-4, 4-5 are the left and right switches, 6 is PK5 and 6 is PD4(*RX)\r\n";
const char helpErrorOutput[] = "\r\n-error shows the current count of errors.\r\n";

const char help[] = "-help";
const char about[] = "-about";
char command[128] = "";
char previousCommand[128] = "";
char callbackCommand[128] = "";
int i = 0;
char arrowInput[2] = "";
// overflow, incorrect command, invalid mem address
int errorCount[] = {0, 0, 0};
int overflowFlag = 0;
char callbackPayload[128] = "";
int callbackPeriod = 1000000;

void infra(void){
    Glo.var.helpAboutOutput = helpAboutOutput;
    Glo.var.input = input;
    Glo.var.echoPrompt = echoPrompt;
    Glo.var.helpHelpOutput = helpHelpOutput;
    Glo.var.helpPrintOutput = helpPrintOutput;
    Glo.var.helpMemrOutput = helpMemrOutput;
    Glo.var.helpGPIOOutput = helpGPIOOutput;
    Glo.var.helpErrorOutput = helpErrorOutput;
    Glo.var.help = help;
    Glo.var.about = about;
    Glo.var.command = command;
    Glo.var.previousCommand = previousCommand;
    Glo.var.callbackCommand = callbackCommand;

    Glo.var.i = i;
    Glo.var.arrowInput = arrowInput;
    Glo.var.errorCount[0] = errorCount[0];
    Glo.var.errorCount[1] = errorCount[1];
    Glo.var.errorCount[2] = errorCount[2];
    Glo.var.overflowFlag = overflowFlag;

    sprintf(aboutOutput, "\r\nSteve Gillet, Assignment 3, v1.431234, %s, %s\r\n", __TIME__, __DATE__); //put outside subroutine
    Glo.var.aboutOutput = aboutOutput;
    Glo.var.timerCallbackCount = timerCallbackCount;
    Glo.var.messageIndex = messageIndex;
    Glo.var.newLine = newLine;
    Glo.msgQue.readIndex = 0;
    Glo.msgQue.writeIndex = 0;
    Glo.var.queLen = queLen;
    Glo.msgQueSem = semaphore0;
    Glo.callback.payload[0] = callbackPayload;
    Glo.callback.payload[1] = callbackPayload;
    Glo.callback.payload[2] = callbackPayload;
    Glo.callback.period = callbackPeriod;
}

void addMessage(const char *inMessage){
    strcpy(Glo.msgQue.messages[Glo.msgQue.writeIndex].message, inMessage);
    Glo.msgQue.messages[Glo.msgQue.writeIndex].queIndex = Glo.msgQue.writeIndex;
    Glo.msgQue.messages[Glo.msgQue.writeIndex].msgIndex = strlen(inMessage) - 1;
    Glo.msgQue.writeIndex++;
    if(Glo.msgQue.writeIndex == Glo.var.queLen) Glo.msgQue.writeIndex = 0;
}

void commandEntry(char *command) {
    if(commandTest(help, command)){
        char *helpCommand;
        helpCommand = secondString(command);

        if(strstr(helpCommand, "help")) UART_write(Glo.uart, Glo.var.helpHelpOutput, strlen(Glo.var.helpHelpOutput));
        else if(strstr(helpCommand, "about")) UART_write(Glo.uart, Glo.var.helpAboutOutput, strlen(Glo.var.helpAboutOutput));
        else if(strstr(helpCommand, "print")) UART_write(Glo.uart, Glo.var.helpPrintOutput, strlen(Glo.var.helpPrintOutput));
        else if(strstr(helpCommand, "memr")) UART_write(Glo.uart, Glo.var.helpMemrOutput, strlen(Glo.var.helpMemrOutput));
        else if(strstr(helpCommand, "gpio")) UART_write(Glo.uart, Glo.var.helpGPIOOutput, strlen(Glo.var.helpGPIOOutput));
        else if(strstr(helpCommand, "error")) UART_write(Glo.uart, Glo.var.helpErrorOutput, strlen(Glo.var.helpErrorOutput));
        else{
            UART_write(Glo.uart, Glo.var.helpHelpOutput, strlen(Glo.var.helpHelpOutput));
            UART_write(Glo.uart, Glo.var.helpAboutOutput, strlen(Glo.var.helpAboutOutput));
            UART_write(Glo.uart, Glo.var.helpPrintOutput, strlen(Glo.var.helpPrintOutput));
            UART_write(Glo.uart, Glo.var.helpMemrOutput, strlen(Glo.var.helpMemrOutput));
            UART_write(Glo.uart, Glo.var.helpGPIOOutput, strlen(Glo.var.helpGPIOOutput));
            UART_write(Glo.uart, Glo.var.helpErrorOutput, strlen(Glo.var.helpErrorOutput));
       }
    }
    else if(commandTest(about, command)) UART_write(Glo.uart, Glo.var.aboutOutput, strlen(Glo.var.aboutOutput));
    else if(commandTest("-print", command)) {
        char *print;
        print = secondString(command);
        UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
        UART_write(Glo.uart, print, strlen(print));
        UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
    }
    else if(commandTest("-memr", command)) {
        char *memoryBuffer;
        long memoryAddress = 0;
        long memoryContents = 0;
        char memoryString[128] = "";
        char memoryAddressString[128] = "";
        char *ptr;

        memoryBuffer = secondString(command);
        memoryAddress = strtol(memoryBuffer, &ptr, 16);
        if(memoryAddress < 0x00000000 || (memoryAddress > 0x000FFFFF && memoryAddress < 0x20000000) || (memoryAddress > 0x2003FFFF && memoryAddress < 0x40000000) || memoryAddress > 0x44055000){
            UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
            UART_write(Glo.uart, "Error: Invalid Address", strlen("Error: Invalid Address"));
            errorCount[2]++;
        }

        else{
            memoryAddress = memoryAddress & 0xFFFFFFF0;

            for(i = 0xC; i >= 0; i -= 0x4){
                sprintf(memoryAddressString, "0x%08lx\t\t", memoryAddress + i);
                UART_write(Glo.uart, &memoryAddressString, strlen(memoryAddressString));
            }
            UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
            for(i = 0xC; i >= 0; i -= 0x4){
                memoryContents = *(int32_t *) (memoryAddress + i);
                sprintf(memoryString, "0x%08lx\t\t", memoryContents);
                UART_write(Glo.uart, memoryString, strlen(memoryString));
            }
            UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
        }
    }
    else if(commandTest("-gpio", command)) {
        char *gpioBuffer;
        char *writeBuffer;
        char *pinBuffer;
        int pinNumber = 0;
        pinBuffer = secondString(command);
        pinNumber = atoi(pinBuffer);
        gpioBuffer = secondString(pinBuffer);
        if(commandTest("-w", gpioBuffer)){
            writeBuffer = secondString(gpioBuffer);
            if(commandTest("0", writeBuffer)) GPIO_write(pinNumber, 0);
            else if(commandTest("1", writeBuffer)) GPIO_write(pinNumber, 1);
            else GPIO_write(0, 1);
        }
        else if(commandTest("-r", gpioBuffer)){
            UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
            if(GPIO_read(pinNumber)) UART_write(Glo.uart, "1", 1);
            else UART_write(Glo.uart, "0", 1);
        }
        else if(commandTest("-t", gpioBuffer)){
            GPIO_toggle(pinNumber);

        }
        else{
            for (i = 0; i < 8; i++){
                UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
                if(GPIO_read(i)) UART_write(Glo.uart, "1", 1);
                else UART_write(Glo.uart, "0", 1);
            }
        }
    }
    else if(commandTest("-error", command)) {
        char errorBufferOverflow[128] = "";
        sprintf(errorBufferOverflow,         "Overflow:          %2d", errorCount[0]);
        char errorBufferIncorrectCommand[128] = "";
        sprintf(errorBufferIncorrectCommand, "Incorrect Command: %2d", errorCount[1]);
        char errorBufferInvalidMemory[128] = "";
        sprintf(errorBufferInvalidMemory,    "Invalid Memory:    %2d", errorCount[2]);
        UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
        UART_write(Glo.uart, errorBufferOverflow, strlen(errorBufferOverflow));
        UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
        UART_write(Glo.uart, errorBufferIncorrectCommand, strlen(errorBufferIncorrectCommand));
        UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
        UART_write(Glo.uart, errorBufferInvalidMemory, strlen(errorBufferInvalidMemory));
        UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
    }
    else if(commandTest("-timer", command)) {
        char *periodBuffer;
        int period;
        periodBuffer = secondString(command);
        period = atoi(periodBuffer);
        if(period > 100) Glo.callback.period = period;
        else if(!period){
            periodBuffer = "";
            sprintf(periodBuffer, "Period is %d", Glo.callback.period);
            UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
            UART_write(Glo.uart, periodBuffer, strlen(periodBuffer));
        }
        else{
            UART_write(Glo.uart, Glo.var.newLine, strlen(Glo.var.newLine));
            UART_write(Glo.uart, "Invalid Period. Period must be > 100", strlen("Invalid Period. Period must be > 100"));
        }
    }
    else if(commandTest("-callback", command)) {
        char *callbackBuffer;
        callbackBuffer = secondString(command);
        char *numberBuffer;
        numberBuffer = secondString(callbackBuffer);
        char *payloadBuffer;
        payloadBuffer = secondString(numberBuffer);

        Glo.var.timerCallbackCount = atoi(numberBuffer);
//        strcpy(callbackCommand, payloadBuffer);
        strcpy(Glo.callback.payload[atoi(callbackBuffer)], payloadBuffer);
    }
    else errorCount[1]++;
    memset(Glo.var.command, 0, strlen(Glo.var.command));
}

void taskCommandServicer(void){
    while(1){
        Semaphore_pend(Glo.msgQueSem, BIOS_WAIT_FOREVER);

        commandEntry(Glo.msgQue.messages[Glo.msgQue.readIndex].message);
        Glo.msgQue.readIndex++;
        if(Glo.msgQue.readIndex == Glo.var.queLen) Glo.msgQue.readIndex = 0;
    }
}

int commandTest(const char *command, const char *compareString){
    int i;
    for (i = 0; i < strlen(command); i++){
        if(compareString[i] != command[i]) return 0;
    }
    return 1;
}

void initializeDrivers(void){
    Timer_Handle timer0;
    Timer_Params params;
    UART_Handle uart;
    UART_Params uartParams;

    /* Call driver init functions */
    Board_init();
    Timer_init();
    UART_init();
    GPIO_init();

//    /* Configure the LED pin */
//    GPIO_setConfig(CONFIG_GPIO_0, GPIO_CFG_OUT_STD | GPIO_CFG_OUT_LOW);
//
//    /* Turn off user LED */
//    GPIO_write(CONFIG_GPIO_0, CONFIG_GPIO_LED_OFF);

    /*
     * Setting up the timer in continuous callback mode that calls the callback
     * function every 1,000,000 microseconds, or 1 second.
     */
    Timer_Params_init(&params);
    params.period = Glo.callback.period;
    params.periodUnits = Timer_PERIOD_US;
    params.timerMode = Timer_CONTINUOUS_CALLBACK;
    params.timerCallback = timerCallback;

    timer0 = Timer_open(CONFIG_TIMER_0, &params);

    if (timer0 == NULL) {
        /* Failed to initialized timer */
        while (1) {}
    }
    /* Call driver init functions */
    if (Timer_start(timer0) == Timer_STATUS_ERROR) {
        /* Failed to start timer */
        while (1) {}
    }

    /* Create a UART with data processing off. */
    UART_Params_init(&uartParams);
    uartParams.writeDataMode = UART_DATA_BINARY;
    uartParams.readDataMode = UART_DATA_BINARY;
    uartParams.readReturnMode = UART_RETURN_FULL;
    uartParams.baudRate = 115200;

    uart = UART_open(CONFIG_UART_0, &uartParams);

    if (uart == NULL) {
        /* UART_open() failed */
        while (1);
    }
    Glo.timer0 = timer0;
    Glo.uart = uart;
}

char *secondString(char *fullString){
    char *outString = NULL;
    int i = 0;
    for (i = 0; i < strlen(fullString); i++){
        if(fullString[i] == ' '){
            outString = &fullString[i + 1];
            return outString;
        }
    }
    return outString;
}

void stringCopy(char *outString, const char *copiedString){
    for(i = 0; i < 128; i++) if(copiedString[i] == 0) break;
    int j = 0;
    for(j = 0; j < i+1; j++){
        outString[j] = copiedString[j];
    }
    outString[j+1] = 0;
}

void timerCallback(Timer_Handle myHandle, int_fast16_t status)
{
    if(Glo.var.timerCallbackCount != 0){
        addMessage(Glo.callback.payload[0]);
        Semaphore_post(Glo.msgQueSem);
        if(Glo.var.timerCallbackCount>0){
            Glo.var.timerCallbackCount--;
        }
    }
}

